name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow pillow-heif

      - name: Build with PyInstaller
        run: |
          pyinstaller --name ImageConverter `
            --windowed `
            --onefile `
            --add-data "app_icon.ico;." `
            --hidden-import PIL._tkinter_finder `
            --icon=app_icon.ico `
            image_converter.py

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: dist/ImageConverter.exe

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow pillow-heif

      - name: Build with PyInstaller
        run: |
          pyinstaller --name ImageConverter-arm64 \
            --windowed \
            --add-data "app_icon.ico:." \
            --hidden-import PIL._tkinter_finder \
            --icon=app_icon.ico \
            image_converter.py

      - name: Verify ARM64 Build
        run: |
          file dist/ImageConverter-arm64.app/Contents/MacOS/ImageConverter-arm64
          
      - name: Upload ARM64 Build
        uses: actions/upload-artifact@v3
        with:
          name: macos-arm64-build
          path: dist/ImageConverter-arm64.app

  build-macos-intel:
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow pillow-heif

      - name: Build with PyInstaller
        run: |
          arch -x86_64 pyinstaller --name ImageConverter-intel \
            --windowed \
            --add-data "app_icon.ico:." \
            --hidden-import PIL._tkinter_finder \
            --icon=app_icon.ico \
            image_converter.py

      - name: Verify Intel Build
        run: |
          file dist/ImageConverter-intel.app/Contents/MacOS/ImageConverter-intel
          
      - name: Upload Intel Build
        uses: actions/upload-artifact@v3
        with:
          name: macos-intel-build
          path: dist/ImageConverter-intel.app

  create-release:
    needs: [build-windows, build-macos-arm64, build-macos-intel]
    runs-on: macos-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Install create-dmg
        run: brew install create-dmg

      - name: List Artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          ls -R artifacts/

      - name: Create Universal App
        run: |
          mkdir -p universal/ImageConverter-Universal.app/Contents/{MacOS,Resources}
          
          # Copy the base app structure
          cp -R artifacts/macos-intel-build/ImageConverter-intel.app/Contents/Resources/* universal/ImageConverter-Universal.app/Contents/Resources/ || echo "Failed to copy Resources"
          cp artifacts/macos-intel-build/ImageConverter-intel.app/Contents/Info.plist universal/ImageConverter-Universal.app/Contents/ || echo "Failed to copy Info.plist"
          
          # Debug binary information
          echo "Intel binary info:"
          file artifacts/macos-intel-build/ImageConverter-intel.app/Contents/MacOS/ImageConverter-intel || echo "Intel binary not found"
          echo "ARM binary info:"
          file artifacts/macos-arm64-build/ImageConverter-arm64.app/Contents/MacOS/ImageConverter-arm64 || echo "ARM binary not found"
          
          # Create universal binary
          lipo -create \
            "artifacts/macos-intel-build/ImageConverter-intel.app/Contents/MacOS/ImageConverter-intel" \
            "artifacts/macos-arm64-build/ImageConverter-arm64.app/Contents/MacOS/ImageConverter-arm64" \
            -output "universal/ImageConverter-Universal.app/Contents/MacOS/ImageConverter" \
            || echo "Failed to create universal binary"

      - name: Create DMG
        run: |
          # Create DMG
          create-dmg \
            --volname "ImageConverter-Universal" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "ImageConverter-Universal.app" 200 190 \
            --hide-extension "ImageConverter-Universal.app" \
            --app-drop-link 600 185 \
            "ImageConverter-Universal.dmg" \
            "universal/" || echo "Failed to create DMG"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-build/ImageConverter.exe
            ImageConverter-Universal.dmg
          name: Release ${{ github.ref_name }}
          body: |
            Image Converter Release ${{ github.ref_name }}
            
            ## Installation
            ### Windows
            1. Download ImageConverter.exe
            2. Run the executable
            
            ### Mac (Universal - supports both Intel and Apple Silicon)
            1. Download ImageConverter-Universal.dmg
            2. Open the DMG file
            3. Drag the ImageConverter app to your Applications folder
            
            ## Changes in this version
            - Universal Mac support (Intel and Apple Silicon)
            - [Add other changes here]
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}